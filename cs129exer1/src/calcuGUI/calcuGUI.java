package calcuGUI;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class calcuGUI extends javax.swing.JFrame {

    /**
     * Creates new form calcuGUI
     */
    
    JFileChooser chooser;
    ArrayList Stringz = new ArrayList<>();

    
    public calcuGUI() {
        initComponents();
        
        processTA.setEditable(false);
        processTA.setLineWrap(true);
        processTA.setWrapStyleWord(true);
        
        
        loadTA.setEditable(false);
        loadTA.setLineWrap(true);
        loadTA.setWrapStyleWord(true);
        
        processbtn.setEnabled(false);
        
        
     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        processTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        loadTA = new javax.swing.JTextArea();
        loadfilebutton = new javax.swing.JButton();
        processbtn = new javax.swing.JButton();
        TFadder = new javax.swing.JTextField();
        adderBT = new javax.swing.JButton();
        clearTA = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        processTA.setBackground(new java.awt.Color(153, 255, 255));
        processTA.setColumns(20);
        processTA.setRows(5);
        processTA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(processTA);

        loadTA.setBackground(new java.awt.Color(204, 255, 255));
        loadTA.setColumns(20);
        loadTA.setRows(5);
        loadTA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadTA.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(loadTA);

        loadfilebutton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        loadfilebutton.setText("Load File");
        loadfilebutton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadfilebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadfilebuttonActionPerformed(evt);
            }
        });

        processbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        processbtn.setText("Process");
        processbtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        processbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processbtnActionPerformed(evt);
            }
        });

        TFadder.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TFadder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFadderActionPerformed(evt);
            }
        });

        adderBT.setText("ADD");
        adderBT.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adderBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adderBTActionPerformed(evt);
            }
        });

        clearTA.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clearTA.setText("Clear table");
        clearTA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clearTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(TFadder, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adderBT, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(loadfilebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearTA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(processbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(412, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(444, 444, 444)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adderBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TFadder))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(processbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clearTA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadfilebutton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                        .addGap(15, 15, 15))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(145, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadfilebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadfilebuttonActionPerformed
        // TODO add your handling code here:

        JFileChooser chooseFile = new JFileChooser();
        String namer = new String ();
//        chooseFile.getUI();
//        chooseFile.getSelectedFile();
        chooseFile.getCurrentDirectory();
//        chooseFile.
//        File mewmew = new File (chooseFile.getSelectedFile());



        chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.showOpenDialog(this);
      

        try {
                FileReader reader = new FileReader(chooser.getSelectedFile());
                BufferedReader br = new BufferedReader(reader);
                String str;
                    while ((str = br.readLine()) != null) {
                        loadTA.append(str + "\n");
                        Stringz.add(str);
                        }       
                    processbtn.setEnabled(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(calcuGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(calcuGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
        
    }//GEN-LAST:event_loadfilebuttonActionPerformed

    private void processbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processbtnActionPerformed
        // TODO add your handling code here:
        
        processTA.setText("");      
               int x = 0;
               while (x != Stringz.size()) {
                   String y = Stringz.get(x).toString().replaceAll("[\t\n]", "");
                        processTA.append("Line:\t" + y + "\n");
                        processTA.append("Postfix:\t" + getPostFixString(y) + "\n");
                        processTA.append("Result:\t" + calculate(y) + "\n\n");
                        x++;
                        }
               processTA.append("---------------------------------------------------------------------------------");
               
               //where the magic begins bahahahahaha charot
               //creates the output file

               try {
                   String output = processTA.getText();
                   File outputfile = new File ("algebra.out");
            try (FileWriter powpow = new FileWriter (outputfile)) {
                powpow.write(output);
                powpow.flush();
                powpow.close();
                System.out.println("saved!");
            }
               } catch (IOException ex) {
            Logger.getLogger(calcuGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
               
               
               
               
    }//GEN-LAST:event_processbtnActionPerformed

    private void TFadderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFadderActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_TFadderActionPerformed

    private void adderBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adderBTActionPerformed
        // TODO add your handling code here:
                
        String z = TFadder.getText();
        if ("".equals(z)) {
            //do nothing duh
        }
        else {
        Stringz.add(z);
        loadTA.append(z + "\n");
        processbtn.setEnabled(true);
        TFadder.setText("");
        }

    }//GEN-LAST:event_adderBTActionPerformed

    private void clearTAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTAActionPerformed
        // TODO add your handling code here:
        
        loadTA.setText("");
        Stringz.clear();
        processbtn.setEnabled(false);
    }//GEN-LAST:event_clearTAActionPerformed
    
   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calcuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calcuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calcuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calcuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new calcuGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TFadder;
    private javax.swing.JButton adderBT;
    private javax.swing.JButton clearTA;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea loadTA;
    private javax.swing.JButton loadfilebutton;
    private javax.swing.JTextArea processTA;
    private javax.swing.JButton processbtn;
    // End of variables declaration//GEN-END:variables
    
    
    // All Functions
    public static int getPreference(char c){
        switch (c) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return -1;
        }
    }
    public static int calculatePostFix(List<String> postFixList){
        Stack<Integer> stack = new Stack<>();
        for(int i=0;i<postFixList.size();i++){
            String word = postFixList.get(i);
            if(word.length()==1 && (word.charAt(0)=='+'||word.charAt(0)=='-'||word.charAt(0)=='*'||word.charAt(0)=='/')){
                int number2 = stack.pop();
                int number1 = stack.pop();
                switch (word.charAt(0)) {
                    case '+':
                        {
                            int number = number1+number2;
                            stack.push(number);
                            break;
                        }
                    case '-':
                        {
                            int number = number1-number2;
                            stack.push(number);
                            break;
                        }
                    case '*':
                        {
                            int number = number1*number2;
                            stack.push(number);
                            break;
                        }
                    default:
                        {
                            int number = number1/number2;
                            stack.push(number);
                            break;
                        }
                }
            }else{
                int number = Integer.parseInt(word);
                stack.push(number);
            }
        }
        return stack.peek();
    }
    public static List<String> getPostFixString(String s){
        Stack<Character> stack = new Stack<>();
        List<String> postFixList = new ArrayList<>();
        boolean flag = false;
        for(int i=0;i<s.length();i++){
            char word = s.charAt(i);
            if(word==' ' || word=='\t'){
                continue;
            }
            switch (word) {
                case '(':
                    stack.push(word);
                    flag = false;
                    break;
                case ')':
                    flag = false;
                    while(!stack.isEmpty()){
                        if(stack.peek()=='('){
                            stack.pop();
                            break;
                        }else{
                            postFixList.add(stack.pop()+"");
                        }
                    }   break;
                case '+':
                case '-':
                case '*':
                case '/':
                    flag = false;
                    if(stack.isEmpty()){
                        stack.push(word);
                    }
                    else{
                        while(!stack.isEmpty() && getPreference(stack.peek())>=getPreference(word)){
                            postFixList.add(stack.pop()+"");
                        }
                        stack.push(word);
                    }   break;
                default:
                    if(flag){
                        String lastNumber = postFixList.get(postFixList.size()-1);
                        lastNumber+=word;
                        postFixList.set(postFixList.size()-1, lastNumber);
                    }else
                        postFixList.add(word+"");
                    flag = true;
                    break;
            }
        }
        while(!stack.isEmpty()){
            postFixList.add(stack.pop()+"");
        }
        return postFixList;
    }
    public static int calculate(String s) {
        List<String> postFixString = getPostFixString(s);
        return calculatePostFix(postFixString);
    }
}


